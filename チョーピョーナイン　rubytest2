1.

prime = Numeric.new
(1..100).each do
   |container|
   (2..(Math.sqrt(container).ceil)).each do |x|
      prime = 1
      if (container.divmod(x)[1] == 0)
         prime = 0
         break
      end
   end
   print "#{container}\n" unless (prime == 0)
end


////////////////////////-----////////////////////////////
1.

def get_is_prime(b)
    (2..Math.sqrt(b)).each do |c|
         if b % c == 0
             return false
         end
     end
     return true
 end
 
 (2..100).each do |a|
     if get_is_prime(a) 
         p a
     end
 end

////////////////////////---------///////////////////////////
2.

def is_uru(year)
     if year%400 == 0
         return true
     end
     if year%100 == 0
         return false
     end
     if year%4 == 0
         return true
 end
 end
 
 (1990..2014).each do |year|
     if is_uru(year)
         p year
     end
 end
 
 /////////////////----------//////////////////////////
2.

puts 'This program will determine what leap years are between two specific dates that you assign.'
puts ''
puts 'What would you like your starting year to be?'
start_year = gets.chomp.to_i
puts ''
puts 'What would you like your ending year to be?'
end_year = gets.chomp.to_i
puts "Leap years between #{start_year} and #{end_year}"

if start_year > end_year
  puts 'Your closing date is before your start date. Please try again'
  return
end

leap_years = []
start_year.upto(end_year) do |year|
  if (year % 4 == 0)
    leap_years << year unless (year % 100 == 0) and (year % 400 != 0)
  end
end

puts leap_years.join(', ')

/////////////////------///////////////////
2.

puts 'starting year:'
s = gets.chop
puts 'ending year:'
e = gets.chop

if s.to_i > e.to_i
  puts 'ending year should be bigger than staring year'
  else
    puts 'leap year between ' + s + ' and '+ e + ' as below:'
end

while s.to_i  < e.to_i

  while ( (s.to_i % 4 == 0 and s.to_i % 100 != 0) or (s.to_i % 100 ==
0 and s.to_i % 400 == 0 ))
      puts s
      s = s.to_i + 1
      end
s = s.to_i + 1
end
puts 'all done'

